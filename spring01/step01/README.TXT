[주제: 스프링 IoC 컨테이너 사용법]
step01
  > Test01.java - 일반적인 객체 생성
  > Test02.java - 스프링 IoC 컨테이너를 이용한 객체 생성
  > Test03.java - 빈의 아이디(id)와 이름(name) 
  > Test04.java - 빈의 이름과 별명 알아내기
  > Test05.java - 익명 빈 
  
step02
  > Test01.java - 생성자 지정하기 
  > Test02.java - 다양한 타입을 갖는 생성자 호출하기
  > Test03.java - 아규먼트의 타입을 지정하지 않을 때, String 타입 우선됨.
  > Test04.java - 아규먼트를 설정하는 다양한 방법
  > Test05.java - 아규먼트의 순서 지정하기 
  
step03
  > Test01.java - 프로퍼티 값 설정하기
  > Test02.java - <bean>의 속성을 이용하여 프로퍼티 값 설정하기
  > Test03.java - <bean>의 속성을 이용하여 생성자 호출하기

step04
  > Test01.java - 의존 객체 주입
  > Test02.java - 프로퍼티에 직접 객체를 생성하여 넣기   
  
step05
  > Test01.java - 배열 프로퍼티 값 설정하기  
  > Test02.java - List 프로퍼티 값 설정하기
  > Test03.java - Set 프로퍼티 값 설정하기
  > Test04.java - Map 프로퍼티 값 설정하기 

step06
  > Test01.java - 스태틱 Factory Method 호출하기
  > Test02.java - 인스턴스 팩토리 메서드 호출하기
  > Test03.java - 스프링에서 제안한 FactoryBean의 구현체 호출하기    
  
step07
  > Test01.java - 빈 생성 정책(bean scope): singleton과 prototype 비교
  > Test02.java - 날짜 프로퍼티 값 입력하기
  > Test03.java - PropertyEditor를 이용하여 날짜 변환기 설치하기 
  > Test03.java - Custom Property Editor 만들기 두 번째 방법
  
step08
  > Test01.java - @Autowired 애노테이션을 처리 전
  > Test02.java - @Autowired 애노테이션을 처리 
  > Test03.java - @Autowired는 필드에 붙여도 된다. 
  > Test04.java - @Autowired의 required 속성 
  > Test05.java - 주입할 수 있는 의존 객체가 여러 개일 경우 오류 발생! 
  > Test06.java - @Qualifier를 사용하여 주입할 객체를 지정한다.
  > Test07.java - @Autowired + @Qualifier = @Resource
  
stepd09
  > Test01.java - @Component 애노테이션 사용  
  
step10
  > Test01.java - 객체 생성 및 프로퍼티 설정 순서

step11
  > Test01.java - log4j 사용 개요!
  > Test02.java - log4j의 로깅 객체 생성과 사용 => 클래스 단위, 이름으로 묶기
                  출력 등록 조정하기
  > Test03.java - 출력 담당자(appender) 지정. => ConsoleAppender 사용
                  출력 형식 선언 => SimpleLayout, HTMLLayout, 
                                 XMLLayout, PatternLayout
                  출력 패턴 지정
  > Test04.java - 출력 대상을 지정                                 
                                 
                                 
                                 
                  
  
    
  